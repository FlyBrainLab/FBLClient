{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"flybrainlab","title":"Home"},{"location":"#flybrainlab","text":"","title":"flybrainlab"},{"location":"flybrainlab/flybrainlab-main/","text":"flybrainlab ffbolabClient ffbolabClient(self, ssl=True, debug=True, authentication=True, user='guest', secret='guestpass', url='wss://neuronlp.fruitflybrain.org:7777/ws', realm='realm1', ca_cert_file='isrgrootx1.pem', intermediate_cert_file='letsencryptauthorityx3.pem', FFBOLabcomm=None) FFBOLab Client class. This class communicates with JupyterLab frontend and connects to FFBO components. Attributes: FFBOLabcomm (obj): The communication object for sending and receiving data. circuit (obj): A Neuroballad circuit that enables local circuit execution and facilitates circuit modification. dataPath (str): Data path to be used. experimentInputs (list of dicts): Inputs as a list of dicts that can be parsed by the GFX component. compiled (bool): Circuits need to be compiled into networkx graphs before being sent for simulation. This is necessary as circuit compilation is a slow process. sendDataToGFX (bool): Whether the data received from the backend should be sent to the frontend. Useful for code-only projects. tryComms ffbolabClient.tryComms(self, a) Communication function to communicate with a JupyterLab frontend if one exists. Arguments: a (obj): Arbitrarily formatted data to be sent via communication. findServerIDs ffbolabClient.findServerIDs(self) Find server IDs to be used for the utility functions. executeNLPquery ffbolabClient.executeNLPquery(self, query=None, language='en', uri=None, queryID=None, returnNAOutput=False) Execute an NLP query. Arguments: query (str): Query string. language (str): Language to use. uri (str): Currently not used; for future NLP extensions. queryID (str): Query ID to be used. Generated automatically. returnNAOutput (bool): Whether the corresponding NA query should not be executed. Returns: dict: NA output or the NA query itself, depending on the returnNAOutput setting. executeNAquery ffbolabClient.executeNAquery(self, res, language='en', uri=None, queryID=None, progressive=True, threshold=5) Execute an NA query. Arguments: res (dict): Neuroarch query. language (str): Language to use. uri (str): A custom FFBO query URI if desired. queryID (str): Query ID to be used. Generated automatically. progressive (bool): Whether the loading should be progressive. Needs to be true most of the time for connection to be stable. threshold (int): Data chunk size. Low threshold is required for the connection to be stable. Returns: bool: Whether the process has been successful. getNeuropils ffbolabClient.getNeuropils(self) Get the neuropils the neurons in the workspace reside in. Returns: list of strings: Set of neuropils corresponding to neurons. sendNeuropils ffbolabClient.sendNeuropils(self) Pack the list of neuropils into a GFX message. Returns: bool: Whether the messaging has been successful. getInfo ffbolabClient.getInfo(self, args) Get information on a neuron. Arguments: args (str): Database ID of the neuron or node. Returns: dict: NA information regarding the node. GFXcall ffbolabClient.GFXcall(self, args) Arbitrary call to a GFX procedure in the GFX component format. Arguments: args (list): A list whose first element is the function name (str) and the following are the arguments. Returns: dict OR string: The call result. updateBackend ffbolabClient.updateBackend(self, type='Null', data='Null') Updates variables in the backend using the data in the Editor. Arguments: type (str): A string, either \"WholeCircuit\" or \"SingleNeuron\", specifying the type of the update. data (str): A stringified JSON Returns: bool: Whether the update was successful. getConnectivity ffbolabClient.getConnectivity(self) Obtain the connectivity matrix of the current circuit in NetworkX format. Returns: dict: The connectivity dictionary. sendExecuteReceiveResults ffbolabClient.sendExecuteReceiveResults(self, circuitName='temp', dt=1e-05, tmax=1.0, compile=False) Compiles and sends a circuit for execution in the GFX backend. Arguments: circuitName (str): The name of the circuit for the backend. compile (bool): Whether to compile the circuit first. Returns: bool: Whether the call was successful. prepareCircuit ffbolabClient.prepareCircuit(self, model='auto') Prepares the current circuit for the Neuroballad format. sendCircuit ffbolabClient.sendCircuit(self, name='temp') Sends a circuit to the backend. Arguments: name (str): The name of the circuit for the backend. processConnectivity ffbolabClient.processConnectivity(self, connectivity) Processes a Neuroarch connectivity dictionary. Returns: tuple: A tuple of nodes, edges and unique edges. GenNB ffbolabClient.GenNB(self, nodes, edges, model='auto', config={}, default_neuron=<neuroballad.neuroballad.MorrisLecar object at 0x000002453D7F55F8>, default_synapse=<neuroballad.neuroballad.AlphaSynapse object at 0x000002454452CC88>) Processes the output of processConnectivity to generate a Neuroballad circuit Returns: tuple: A tuple of the Neuroballad circuit, and a dictionary that maps the neuron names to the uids. sendCircuitPrimitive ffbolabClient.sendCircuitPrimitive(self, C, args={'name': 'temp'}) Sends a NetworkX graph to the backend. alter ffbolabClient.alter(self, X) Alters a set of models with specified Neuroballad models. Arguments: X (list of lists): A list of lists. Elements are lists whose first element is the neuron ID (str) and the second is the Neuroballad object corresponding to the model. addInput ffbolabClient.addInput(self, x) Adds an input to the experiment settings. The input is a Neuroballad input object. Arguments: x (Neuroballad Input Object): The input object to append to the list of inputs. Returns: dict: The input object added to the experiment list. listInputs ffbolabClient.listInputs(self) Sends the current experiment settings to the frontend for displaying in the JSONEditor. fetchCircuit ffbolabClient.fetchCircuit(self, X, local=True) Deprecated function that locally saves a circuit file via the backend. Deprecated because of connectivity issues with large files. fetchExperiment ffbolabClient.fetchExperiment(self, X, local=True) Deprecated function that locally saves an experiment file via the backend. Deprecated because of connectivity issues with large files. fetchSVG ffbolabClient.fetchSVG(self, X, local=True) Deprecated function that locally saves an SVG via the backend. Deprecated because of connectivity issues with large files. sendSVG ffbolabClient.sendSVG(self, X) Deprecated function that loads an SVG via the backend. Deprecated because of connectivity issues with large files. FICurveGenerator ffbolabClient.FICurveGenerator(self, model) Sample library function showing how to do automated experimentation using FFBOLab's Notebook features. Takes a simple abstract neuron model and runs experiments on it. Arguments: model (Neuroballad Model Object): The model object to test. Returns: numpy array: A tuple of NumPy arrays corresponding to the X and Y of the FI curve. loadCartridge ffbolabClient.loadCartridge(self, cartridgeIndex=100) Sample library function for loading cartridges, showing how one can build libraries that work with FFBOLab.","title":"Client"}]}