{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"flybrainlab","title":"Home"},{"location":"#flybrainlab","text":"","title":"flybrainlab"},{"location":"flybrainlab/flybrainlab-main/","text":"flybrainlab Client Client(self, ssl=True, debug=True, authentication=True, user='guest', secret='guestpass', custom_salt=None, url='wss://neuronlp.fruitflybrain.org:7777/ws', realm='realm1', ca_cert_file='isrgrootx1.pem', intermediate_cert_file='letsencryptauthorityx3.pem', FFBOLabcomm=None, legacy=False) FlyBrainLab Client class. This class communicates with JupyterLab frontend and connects to FFBO components. Attributes: FFBOLabcomm (obj): The communication object for sending and receiving data. circuit (obj): A Neuroballad circuit that enables local circuit execution and facilitates circuit modification. dataPath (str): Data path to be used. experimentInputs (list of dicts): Inputs as a list of dicts that can be parsed by the GFX component. compiled (bool): Circuits need to be compiled into networkx graphs before being sent for simulation. This is necessary as circuit compilation is a slow process. sendDataToGFX (bool): Whether the data received from the backend should be sent to the frontend. Useful for code-only projects. tryComms Client.tryComms(self, a) Communication function to communicate with a JupyterLab frontend if one exists. Arguments: a (obj): Arbitrarily formatted data to be sent via communication. findServerIDs Client.findServerIDs(self) Find server IDs to be used for the utility functions. executeNLPquery Client.executeNLPquery(self, query=None, language='en', uri=None, queryID=None, returnNAOutput=False) Execute an NLP query. Arguments: query (str): Query string. language (str): Language to use. uri (str): Currently not used; for future NLP extensions. queryID (str): Query ID to be used. Generated automatically. returnNAOutput (bool): Whether the corresponding NA query should not be executed. Returns: dict: NA output or the NA query itself, depending on the returnNAOutput setting. executeNAquery Client.executeNAquery(self, res, language='en', uri=None, queryID=None, progressive=True, threshold=20) Execute an NA query. Arguments: res (dict): Neuroarch query. language (str): Language to use. uri (str): A custom FFBO query URI if desired. queryID (str): Query ID to be used. Generated automatically. progressive (bool): Whether the loading should be progressive. Needs to be true most of the time for the connection to be stable. threshold (int): Data chunk size. Low threshold is required for the connection to be stable. Returns: bool: Whether the process has been successful. createTag Client.createTag(self, tagName) Creates a tag. Returns: bool: True. loadTag Client.loadTag(self, tagName) Loads a tag. Returns: bool: True. addByUname Client.addByUname(self, uname, verb='add') Adds some neurons by the uname. Returns: bool: True. removeByUname Client.removeByUname(self, uname) Removes some neurons by the uname. Returns: bool: True. runLayouting Client.runLayouting(self, type='auto', model='auto') Sends a request for the running of the layouting algorithm. Returns: bool: True. getNeuropils Client.getNeuropils(self) Get the neuropils the neurons in the workspace reside in. Returns: list of strings: Set of neuropils corresponding to neurons. sendNeuropils Client.sendNeuropils(self) Pack the list of neuropils into a GFX message. Returns: bool: Whether the messaging has been successful. getInfo Client.getInfo(self, args) Get information on a neuron. Arguments: args (str): Database ID of the neuron or node. Returns: dict: NA information regarding the node. GFXcall Client.GFXcall(self, args) Arbitrary call to a GFX procedure in the GFX component format. Arguments: args (list): A list whose first element is the function name (str) and the following are the arguments. Returns: dict OR string: The call result. updateBackend Client.updateBackend(self, type='Null', data='Null') Updates variables in the backend using the data in the Editor. Arguments: type (str): A string, either \"WholeCircuit\" or \"SingleNeuron\", specifying the type of the update. data (str): A stringified JSON Returns: bool: Whether the update was successful. getConnectivity Client.getConnectivity(self) Obtain the connectivity matrix of the current circuit in NetworkX format. Returns: dict: The connectivity dictionary. sendExecuteReceiveResults Client.sendExecuteReceiveResults(self, circuitName='temp', dt=1e-05, tmax=1.0, inputProcessors=[], compile=False) Compiles and sends a circuit for execution in the GFX backend. Arguments: circuitName (str): The name of the circuit for the backend. compile (bool): Whether to compile the circuit first. Returns: bool: Whether the call was successful. prepareCircuit Client.prepareCircuit(self, model='auto') Prepares the current circuit for the Neuroballad format. getSlowConnectivity Client.getSlowConnectivity(self) Obtain the connectivity matrix of the current circuit in a custom dictionary format. Necessary for large circuits. Returns: dict: The connectivity dictionary. sendCircuit Client.sendCircuit(self, name='temp') Sends a circuit to the backend. Arguments: name (str): The name of the circuit for the backend. processConnectivity Client.processConnectivity(self, connectivity) Processes a Neuroarch connectivity dictionary. Returns: tuple: A tuple of nodes, edges and unique edges. getSynapses Client.getSynapses(self, presynapticNeuron, postsynapticNeuron) Returns the synapses between a given presynaptic neuron and a postsynaptic neuron. Arguments: presynapticNeuron (str): The name of the presynaptic neuron. postsynapticNeuron (str): The name of the postsynaptic neuron. Returns: float: The number of synapses. getPresynapticNeurons Client.getPresynapticNeurons(self, postsynapticNeuron) Returns a dictionary of all presynaptic neurons for a given postsynaptic neuron. Arguments: postsynapticNeuron (str): The name of the postsynaptic neuron. Returns: dict: A dictionary whose keys are the presynaptic neurons and whose values are numbers of synapses for the given postsynaptic neuron. getPostsynapticNeurons Client.getPostsynapticNeurons(self, presynapticNeuron) Returns a dictionary of all postsynaptic neurons for a given presynaptic neuron. Arguments: presynapticNeuron (str): The name of the presynaptic neuron. Returns: dict: A dictionary whose keys are the presynaptic neurons and whose values are numbers of synapses for the given presynaptic neuron. genNB Client.genNB(self, nodes, edges, model='auto', config={}, default_neuron=<neuroballad.neuroballad.MorrisLecar object at 0x0000024E4696BCC0>, default_synapse=<neuroballad.neuroballad.AlphaSynapse object at 0x0000024E44278B00>) Processes the output of processConnectivity to generate a Neuroballad circuit. Returns: tuple: A tuple of the Neuroballad circuit, and a dictionary that maps the neuron names to the uids. sendCircuitPrimitive Client.sendCircuitPrimitive(self, C, args={'name': 'temp'}) Sends a NetworkX graph to the backend. alter Client.alter(self, X) Alters a set of models with specified Neuroballad models. Arguments: X (list of lists): A list of lists. Elements are lists whose first element is the neuron ID (str) and the second is the Neuroballad object corresponding to the model. addInput Client.addInput(self, x) Adds an input to the experiment settings. The input is a Neuroballad input object. Arguments: x (Neuroballad Input Object): The input object to append to the list of inputs. Returns: dict: The input object added to the experiment list. listInputs Client.listInputs(self) Sends the current experiment settings to the frontend for displaying in an editor. fetchCircuit Client.fetchCircuit(self, X, local=True) Deprecated function that locally saves a circuit file via the backend. Deprecated because of connectivity issues with large files. fetchExperiment Client.fetchExperiment(self, X, local=True) Deprecated function that locally saves an experiment file via the backend. Deprecated because of connectivity issues with large files. fetchSVG Client.fetchSVG(self, X, local=True) Deprecated function that locally saves an SVG via the backend. Deprecated because of connectivity issues with large files. sendSVG Client.sendSVG(self, name, file) Sends an SVG to the FBL fileserver. Useful for storing data and using loadSVG. Arguments: name (str): Name to use when saving the file; '_visual' gets automatically appended to it. file (str): Path to the SVG file. loadSVG Client.loadSVG(self, name) Loads an SVG in the FBL fileserver. Arguments: name (str): Name to use when loading the file. FICurveGenerator Client.FICurveGenerator(self, model) Sample library function showing how to do automated experimentation using FFBOLab's Notebook features. Takes a simple abstract neuron model and runs experiments on it. Arguments: model (Neuroballad Model Object): The model object to test. Returns: numpy array: A tuple of NumPy arrays corresponding to the X and Y of the FI curve. parseSimResults Client.parseSimResults(self) Parses the simulation results. Deprecated. getSimResults Client.getSimResults(self) Computes the simulation results. Returns: numpy array: A neurons-by-time array of results. list: A list of neuron names, sorted according to the data. plotSimResults Client.plotSimResults(self, B, keys) Plots the simulation results. A simple function to demonstrate result display. Arguments: model (Neuroballad Model Object): The model object to test. FICurvePlotSimResults Client.FICurvePlotSimResults(self) Plots some result curves for the FI curve generator example. loadCartridge Client.loadCartridge(self, cartridgeIndex=100) Sample library function for loading cartridges, showing how one can build libraries that work with flybrainlab. loadExperimentConfig Client.loadExperimentConfig(self, x) Updates the simExperimentConfig attribute using input from the diagram. Arguments: x (string): A JSON dictionary as a string. Returns: bool: True. initiateExperiments Client.initiateExperiments(self) Initializes and executes experiments for different LPUs. prune_retina_lamina Client.prune_retina_lamina(self, removed_neurons=[], removed_labels=[], retrieval_format='nk') Prunes the retina and lamina circuits. Arguments: cartridgeIndex (int): The cartridge to load. Optional. Returns: dict: A result dict to use with the execute_lamina_retina function. Example: res = nm[0].load_retina_lamina() nm[0].execute_multilpu(res) load_retina_lamina Client.load_retina_lamina(self, cartridgeIndex=11, removed_neurons=[], removed_labels=[], retrieval_format='nk') Loads retina and lamina. Arguments: cartridgeIndex (int): The cartridge to load. Optional. Returns: dict: A result dict to use with the execute_lamina_retina function. Example: nm[0].getExperimentConfig() # In a different cell experiment_configuration = nm[0].load_retina_lamina(cartridgeIndex=126) experiment_configuration = experiment_configuration['success']['result'] nm[0].execute_multilpu(experiment_configuration) execute_multilpu Client.execute_multilpu(self, res, inputProcessors=[], steps=None, dt=None) Executes a multilpu circuit. Requires a result dictionary. Arguments: res (dict): The result dictionary to use for execution. Returns: bool: A success indicator. export_diagram_config Client.export_diagram_config(self, res) Exports a diagram configuration from Neuroarch data to GFX. Arguments: res (dict): The result dictionary to use for export. Returns: dict: The configuration to export. import_diagram_config Client.import_diagram_config(self, res, newConfig) Imports a diagram configuration from Neuroarch data. Arguments: res (dict): The result dictionary to update. newConfig (dict): The imported configuration from a diagram. Returns: dict: The updated Neuroarch result dictionary.","title":"Client"}]}